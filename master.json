{"meta":{"generator":"0.5.2","format":18,"date":1480723457835},"custom":{"general":[{"id":"welcome","name":"Welcome","type":"md","content":"# Commando\n[![Discord](https://discordapp.com/api/guilds/222078108977594368/embed.png)](https://discord.gg/bRCvFy9)\n[![Downloads](https://img.shields.io/npm/dt/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Version](https://img.shields.io/npm/v/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Dependency status](https://david-dm.org/Gawdl3y/discord.js-commando.svg)](https://david-dm.org/Gawdl3y/discord.js-commando)\n[![Build status](https://travis-ci.org/hydrabolt/discord.js.svg)](https://travis-ci.org/hydrabolt/discord.js)\n\n## About\nCommando is the official command framework for [discord.js](https://github.com/hydrabolt/discord.js).\nIt is powerful, fully object-oriented, easy to use, and makes it trivial to create your own powerful commands.\nAdditionally, it makes full use of ES2017's `async`/`await` functionality for clear, concise code that is simple to write and easy to comprehend.\n\n## Features\n- Plain command names and aliases\n- Regular expression triggers\n- Robust parsing of arguments (with \"quoted strings\" support)\n- Sophisticated argument system (optional)\n\t* Automatic prompting for arguments that aren't provided\n\t* Built-in types, with rules, automatic validation, and parsing to usable values\n\t\t- Basic types (string, integer, float, boolean)\n\t\t- Discord objects (user, member, role, channel, message)\n\t* Automatic re-prompting of invalid arguments\n\t* Optional arguments with default values\n\t* Infinite arguments (arguments that accept as many values as provided)\n- Multiple responses to commands\n- Command editing (user edits their message that triggered the command, and the bot's response updates with it)\n- Command reloading, as well as loading/unloading\n- Command throttling/cooldowns\n\n## Installation\n**Node 7.0.0 or newer is required.**  \n`npm install discord.js-commando --save`\n\nWhen running a bot using Commando, make sure to run Node with the `--harmony` flag. Examples:\n- `node --harmony somebot.js`\n- `pm2 start somebot.js --node-args='--harmony'`\n\nNo version of Node older than 7.0.0 supports `async`/`await`, although you can compile it down to ES6 or ES5 with the\n[fast-async](https://www.npmjs.com/package/fast-async) Babel plugin. You must do this for your code and the framework's manually if you wish\nto use Commando on older Node versions.\n"}]},"classes":[{"name":"CommandArgument","description":"A fancy argument for a command","construct":{"name":"CommandArgument","params":[{"name":"command","description":"Command the argument is for","type":[[["Command"]]]},{"name":"info","description":"Information for the command argument","type":[[["CommandArgumentInfo"]]]}]},"props":[{"name":"command","description":"Command the argument is for","type":[[["Command"]]],"meta":{"line":82,"file":"argument.js","path":"src"}},{"name":"key","description":"Key for the argument","type":[[["string"]]],"meta":{"line":88,"file":"argument.js","path":"src"}},{"name":"label","description":"Label for the argument","type":[[["string"]]],"meta":{"line":94,"file":"argument.js","path":"src"}},{"name":"prompt","description":"Question prompt for the argument","type":[[["string"]]],"meta":{"line":100,"file":"argument.js","path":"src"}},{"name":"type","description":"Type of the argument ('string', 'integer', 'float', 'boolean', 'user', 'member', 'role', 'channel', or 'message')","nullable":true,"type":[[["string"]]],"meta":{"line":106,"file":"argument.js","path":"src"}},{"name":"max","description":"If type is 'integer' or 'float', this is the maximum value of the number.\nIf type is 'string', this is the maximum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":113,"file":"argument.js","path":"src"}},{"name":"min","description":"If type is 'integer' or 'float', this is the minimum value of the number.\nIf type is 'string', this is the minimum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":120,"file":"argument.js","path":"src"}},{"name":"default","description":"The default value for the argument","nullable":true,"type":[["*"]],"meta":{"line":126,"file":"argument.js","path":"src"}},{"name":"infinite","description":"Whether the argument accepts an infinite number of values","type":[[["boolean"]]],"meta":{"line":132,"file":"argument.js","path":"src"}},{"name":"validator","description":"Validator function for validating a value for the argument","type":[[["ArgumentValidator"]]],"meta":{"line":138,"file":"argument.js","path":"src"}},{"name":"parser","description":"Parser function for parsing a value for the argument","type":[[["ArgumentParser"]]],"meta":{"line":144,"file":"argument.js","path":"src"}},{"name":"wait","description":"How long to wait for input (in seconds)","type":[[["number"]]],"meta":{"line":150,"file":"argument.js","path":"src"}}],"methods":[{"name":"obtain","description":"Prompts the user and obtains the value for the argument","params":[{"name":"msg","description":"Message that triggered the command","type":[[["Message"]]]},{"name":"value","description":"Pre-provided value for the argument","optional":true,"type":[[["string"]]]}],"returns":[[["Promise",".<?*>"]]],"meta":{"line":159,"file":"argument.js","path":"src"}},{"name":"obtainInfinite","description":"Prompts the user and obtains multiple values for the argument","params":[{"name":"msg","description":"Message that triggered the command","type":[[["Message"]]]},{"name":"values","description":"Pre-provided values for the argument","optional":true,"type":[[["Array",".<"],["string",">"]]]}],"returns":[[["Promise",".<?"],["Array",".<*>>"]]],"meta":{"line":189,"file":"argument.js","path":"src"}},{"name":"validate","description":"Checks if a value is valid for the argument","params":[{"name":"value","description":"Value to check","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["Message"]]]}],"returns":[[["Promise",".<("],["boolean","|"],["string",")>"]]],"meta":{"line":247,"file":"argument.js","path":"src"}},{"name":"parse","description":"Parses a value string into a proper value for the argument","params":[{"name":"value","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["Message"]]]}],"returns":[[["Promise",".<*>"]]],"meta":{"line":279,"file":"argument.js","path":"src"}},{"name":"validateString","description":"Checks if a string is not empty, and is within the min and max limits, if set","params":[{"name":"value","description":"String to validate","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":310,"file":"argument.js","path":"src"}},{"name":"validateInteger","description":"Checks if a string can be interpreted as an integer, and is within the min and max limits, if set","params":[{"name":"value","description":"String to validate","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":321,"file":"argument.js","path":"src"}},{"name":"validateFloat","description":"Checks if a string can be interpreted as a float, and is within the min and max limits, if set","params":[{"name":"value","description":"String to validate","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":333,"file":"argument.js","path":"src"}},{"name":"validateBoolean","description":"Checks if a string can be interpreted as a boolean","scope":"static","params":[{"name":"value","description":"String to validate","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":345,"file":"argument.js","path":"src"}},{"name":"parseBoolean","description":"Parses a boolean out of a string","scope":"static","params":[{"name":"value","description":"String to parse","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":354,"file":"argument.js","path":"src"}},{"name":"validateUser","description":"Checks if a string can be interpreted as a User object","scope":"static","params":[{"name":"value","description":"String to validate","type":[[["string"]]]},{"name":"msg","description":"Message that the value is from","type":[[["CommandMessage"]]]}],"returns":[[["Promise",".<"],["boolean",">"]]],"meta":{"line":367,"file":"argument.js","path":"src"}},{"name":"parseUser","description":"Parses a string into a User object","scope":"static","params":[{"name":"value","description":"String to parse","type":[[["string"]]]},{"name":"msg","description":"Message that the value is from","type":[[["CommandMessage"]]]}],"returns":[[["User"]]],"meta":{"line":397,"file":"argument.js","path":"src"}},{"name":"validateMember","description":"Checks if a string can be interpreted as a GuildMember object","scope":"static","params":[{"name":"value","description":"String to validate","type":[[["string"]]]},{"name":"msg","description":"Message that the value is from","type":[[["CommandMessage"]]]}],"returns":[[["Promise",".<"],["boolean",">"]]],"meta":{"line":416,"file":"argument.js","path":"src"}},{"name":"parseMember","description":"Parses a string into a GuildMember object","scope":"static","params":[{"name":"value","description":"String to parse","type":[[["string"]]]},{"name":"msg","description":"Message that the value is from","type":[[["CommandMessage"]]]}],"returns":[[["GuildMember"]]],"meta":{"line":445,"file":"argument.js","path":"src"}},{"name":"validateRole","description":"Checks if a string can be interpreted as a Role object","scope":"static","params":[{"name":"value","description":"String to validate","type":[[["string"]]]},{"name":"msg","description":"Message that the value is from","type":[[["CommandMessage"]]]}],"returns":[[["boolean"]]],"meta":{"line":463,"file":"argument.js","path":"src"}},{"name":"parseRole","description":"Parses a string into a Role object","scope":"static","params":[{"name":"value","description":"String to parse","type":[[["string"]]]},{"name":"msg","description":"Message that the value is from","type":[[["CommandMessage"]]]}],"returns":[[["Role"]]],"meta":{"line":482,"file":"argument.js","path":"src"}},{"name":"validateChannel","description":"Checks if a string can be interpreted as a Channel object","scope":"static","params":[{"name":"value","description":"String to validate","type":[[["string"]]]},{"name":"msg","description":"Message that the value is from","type":[[["CommandMessage"]]]}],"returns":[[["boolean"]]],"meta":{"line":500,"file":"argument.js","path":"src"}},{"name":"parseChannel","description":"Parses a string into a Channel object","scope":"static","params":[{"name":"value","description":"String to parse","type":[[["string"]]]},{"name":"msg","description":"Message that the value is from","type":[[["CommandMessage"]]]}],"returns":[[["Channel"]]],"meta":{"line":519,"file":"argument.js","path":"src"}},{"name":"validateMessage","description":"Checks if a string can be interpreted as a Message object","scope":"static","params":[{"name":"value","description":"String to validate","type":[[["string"]]]},{"name":"msg","description":"Message that the value is from","type":[[["CommandMessage"]]]}],"returns":[[["Promise",".<"],["boolean",">"]]],"meta":{"line":537,"file":"argument.js","path":"src"}},{"name":"parseMessage","description":"Parses a string into a Message object","scope":"static","params":[{"name":"value","description":"String to parse","type":[[["string"]]]},{"name":"msg","description":"Message that the value is from","type":[[["CommandMessage"]]]}],"returns":[[["Message"]]],"meta":{"line":548,"file":"argument.js","path":"src"}}],"meta":{"line":8,"file":"argument.js","path":"src"}},{"name":"CommandBuilder","description":"Builds commands with a fluent API","construct":{"name":"CommandBuilder","params":[{"name":"registry","description":"The registry the command is for","type":[[["CommandRegistry"]]]},{"name":"info","description":"The command info","optional":true,"default":null,"type":[[["CommandInfo"]]]},{"name":"funcs","description":"The command functions to set","optional":true,"default":null,"type":[[["CommandBuilderFunctions"]]]}]},"props":[{"name":"registry","type":[[["CommandRegistry"]]],"meta":{"line":20,"file":"builder.js","path":"src"}},{"name":"commandInfo","type":[[["CommandInfo"]]],"meta":{"line":22,"file":"builder.js","path":"src"}},{"name":"command","type":[[["Command"]]],"meta":{"line":24,"file":"builder.js","path":"src"}}],"methods":[{"name":"info","description":"Sets the command information.\nThis must be used before any other method if info was not provided to the constructor.","params":[{"name":"info","description":"The command info","type":[[["CommandInfo"]]]}],"returns":{"types":[[["CommandBuilder"]]],"description":"This builder"},"meta":{"line":39,"file":"builder.js","path":"src"}},{"name":"run","description":"Sets the command's run method","params":[{"name":"fn","description":"The function to use","type":[[["function"]]]},{"name":"extras","description":"Extra values to pass to the function","optional":true,"default":"[]","type":[[["Array",".<*>"]]]}],"returns":{"types":[[["CommandBuilder"]]],"description":"This builder"},"meta":{"line":51,"file":"builder.js","path":"src"}},{"name":"hasPermission","description":"Sets the command's hasPermission method","params":[{"name":"fn","description":"The function to use","type":[[["function"]]]},{"name":"extras","description":"Extra values to pass to the function","optional":true,"default":"[]","type":[[["Array",".<*>"]]]}],"returns":{"types":[[["CommandBuilder"]]],"description":"This builder"},"meta":{"line":64,"file":"builder.js","path":"src"}},{"name":"register","description":"Registers the command","returns":{"types":[[["Command"]]],"description":"The command that was registered"},"meta":{"line":75,"file":"builder.js","path":"src"}}],"meta":{"line":4,"file":"builder.js","path":"src"}},{"name":"CommandoClient","description":"Discord.js Client with a command framework","extends":["Client"],"construct":{"name":"CommandoClient","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["CommandoClientOptions"]]]}]},"props":[{"name":"registry","description":"The client's command registry","type":[[["CommandRegistry"]]],"meta":{"line":37,"file":"client.js","path":"src"}},{"name":"dispatcher","description":"The client's command dispatcher","type":[[["CommandDispatcher"]]],"meta":{"line":43,"file":"client.js","path":"src"}},{"name":"settings","description":"The client's setting provider","nullable":true,"type":[[["SettingProvider"]]],"meta":{"line":49,"file":"client.js","path":"src"}},{"name":"commandPrefix","description":"The global command prefix - modifying this will emit {@link CommandoClient#commandPrefixChange}.","type":[[["string"]]],"meta":{"line":72,"file":"client.js","path":"src"}}],"methods":[{"name":"setProvider","description":"Sets the setting provider to use, and initialises it once the client is ready","params":[{"name":"provider","description":"Provider to use","type":[[["SettingProvider"]],[["Promise",".<"],["SettingProvider",">"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":87,"file":"client.js","path":"src"}}],"events":[{"name":"unknownCommand","description":"Emitted when an unknown command is triggered","params":[{"name":"message","description":"Command message that triggered the command","type":[[["CommandMessage"]]]}],"meta":{"line":112,"file":"dispatcher.js","path":"src"}},{"name":"commandBlocked","description":"Emitted when a command is prevented from running","params":[{"name":"message","description":"Command message that the command is running from","type":[[["CommandMessage"]]]},{"name":"reason","description":"Reason that the command was blocked","type":[[["string"]]]}],"meta":{"line":135,"file":"message.js","path":"src"}},{"name":"commandRun","description":"Emitted when running a command","params":[{"name":"command","description":"Command that is being run","type":[[["Command"]]]},{"name":"promise","description":"Promise for the command result","type":[[["Promise"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array",".<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]}],"meta":{"line":172,"file":"message.js","path":"src"}},{"name":"commandError","description":"Emitted when a command produces an error while running","params":[{"name":"command","description":"Command that produced an error","type":[[["Command"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array",".<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]}],"meta":{"line":192,"file":"message.js","path":"src"}},{"name":"groupRegister","description":"Emitted when a group is registered","params":[{"name":"group","description":"Group that was registered","type":[[["CommandGroup"]]]},{"name":"registry","description":"Registry that the group was registered to","type":[[["CommandRegistry"]]]}],"meta":{"line":74,"file":"registry.js","path":"src"}},{"name":"commandRegister","description":"Emitted when a command is registered","params":[{"name":"command","description":"Command that was registered","type":[[["CommandGroup"]]]},{"name":"registry","description":"Registry that the command was registered to","type":[[["CommandRegistry"]]]}],"meta":{"line":133,"file":"registry.js","path":"src"}},{"name":"commandReregister","description":"Emitted when a command is reregistered","params":[{"name":"newCommand","description":"New command","type":[[["Command"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":226,"file":"registry.js","path":"src"}},{"name":"commandUnregister","description":"Emitted when a command is unregistered","params":[{"name":"command","description":"Command that was unregistered","type":[[["Command"]]]}],"meta":{"line":243,"file":"registry.js","path":"src"}},{"name":"commandPrefixChange","description":"Emitted whenever a guild's command prefix is changed","params":[{"name":"guild","description":"Guild that the prefix was changed in (null for global)","nullable":true,"type":[[["Guild"]]]},{"name":"prefix","description":"New command prefix (null for default)","nullable":true,"type":[[["string"]]]}],"meta":{"line":15,"file":"guild.js","path":"src/extensions"}},{"name":"commandStatusChange","description":"Emitted whenever a command is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the command was enabled/disabled in (null for global)","nullable":true,"type":[[["Guild"]]]},{"name":"command","description":"Command that was enabled/disabled","type":[[["Command"]]]},{"name":"enabled","description":"Whether the command is enabled","type":[[["boolean"]]]}],"meta":{"line":36,"file":"guild.js","path":"src/extensions"}},{"name":"groupStatusChange","description":"Emitted whenever a command group is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the group was enabled/disabled in (null for global)","nullable":true,"type":[[["Guild"]]]},{"name":"group","description":"Group that was enabled/disabled","type":[[["CommandGroup"]]]},{"name":"enabled","description":"Whether the group is enabled","type":[[["boolean"]]]}],"meta":{"line":72,"file":"guild.js","path":"src/extensions"}}],"meta":{"line":9,"file":"client.js","path":"src"}},{"name":"Command","description":"A command that can be run in a client","construct":{"name":"Command","params":[{"name":"client","description":"The client the command is for","type":[[["CommandoClient"]]]},{"name":"info","description":"The command information","type":[[["CommandInfo"]]]}]},"props":[{"name":"client","description":"Client that this command is for","type":[[["CommandoClient"]]],"meta":{"line":84,"file":"command.js","path":"src"}},{"name":"name","description":"Name of this command","type":[[["string"]]],"meta":{"line":90,"file":"command.js","path":"src"}},{"name":"aliases","description":"Aliases for this command","type":[[["Array",".<"],["string",">"]]],"meta":{"line":96,"file":"command.js","path":"src"}},{"name":"groupID","description":"ID of the group the command belongs to","type":[[["string"]]],"meta":{"line":108,"file":"command.js","path":"src"}},{"name":"group","description":"The group the command belongs to, assigned upon registration","nullable":true,"type":[[["CommandGroup"]]],"meta":{"line":114,"file":"command.js","path":"src"}},{"name":"memberName","description":"Name of the command within the group","type":[[["string"]]],"meta":{"line":120,"file":"command.js","path":"src"}},{"name":"description","description":"Short description of the command","type":[[["string"]]],"meta":{"line":126,"file":"command.js","path":"src"}},{"name":"format","description":"Usage format string of the command","type":[[["string"]]],"meta":{"line":132,"file":"command.js","path":"src"}},{"name":"details","description":"Long description of the command","nullable":true,"type":[[["string"]]],"meta":{"line":138,"file":"command.js","path":"src"}},{"name":"examples","description":"Example usage strings","nullable":true,"type":[[["Array",".<"],["string",">"]]],"meta":{"line":144,"file":"command.js","path":"src"}},{"name":"guildOnly","description":"Whether the command can only be run in a guild channel","type":[[["boolean"]]],"meta":{"line":150,"file":"command.js","path":"src"}},{"name":"defaultHandling","description":"Whether the default command handling is enabled for the command","type":[[["boolean"]]],"meta":{"line":156,"file":"command.js","path":"src"}},{"name":"throttling","description":"Options for throttling command usages","nullable":true,"type":[[["ThrottlingOptions"]]],"meta":{"line":162,"file":"command.js","path":"src"}},{"name":"args","description":"The arguments for the command","nullable":true,"type":[[["Array",".<"],["CommandArgument",">"]]],"meta":{"line":168,"file":"command.js","path":"src"}},{"name":"argsType","description":"How the arguments are split when passed to the command's run method","type":[[["string"]]],"meta":{"line":188,"file":"command.js","path":"src"}},{"name":"argsCount","description":"Maximum number of arguments that will be split","type":[[["number"]]],"meta":{"line":194,"file":"command.js","path":"src"}},{"name":"argsSingleQuotes","description":"Whether single quotes are allowed to encapsulate an argument","type":[[["boolean"]]],"meta":{"line":200,"file":"command.js","path":"src"}},{"name":"patterns","description":"Regular expression triggers","type":[[["Array",".<"],["RegExp",">"]]],"meta":{"line":206,"file":"command.js","path":"src"}},{"name":"guarded","description":"Whether the command is protected from being disabled","type":[[["boolean"]]],"meta":{"line":212,"file":"command.js","path":"src"}}],"methods":[{"name":"hasPermission","description":"Checks a user's permission in a guild","params":[{"name":"message","description":"The triggering command message","type":[[["CommandMessage"]]]}],"returns":[[["boolean"]]],"meta":{"line":223,"file":"command.js","path":"src"}},{"name":"run","description":"Runs the command","params":[{"name":"message","description":"The message the command is being run for","type":[[["CommandMessage"]]]},{"name":"args","description":"The arguments for the command, or the matches from a pattern.\nIf args is specified on the command, thise will be the argument values object. If argsType is single, then only\none string will be passed. If multiple, an array of strings will be passed. When fromPattern is true, this is the\nmatches array from the pattern match\n(see [RegExp#exec](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)).","type":[[["Object"]],[["string"]],[["Array",".<"],["string",">"]]]},{"name":"fromPattern","description":"Whether or not the command is being run from a pattern match","type":[[["boolean"]]]}],"returns":[[["Promise",".<(?"],["Message","|?"],["Array",".<"],["Message",">)>"]]],"meta":{"line":239,"file":"command.js","path":"src"}},{"name":"setEnabledIn","description":"Enables or disables the command in a guild","params":[{"name":"guild","description":"Guild to enable/disable the command in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":248,"file":"command.js","path":"src"}},{"name":"isEnabledIn","description":"Checks if the command is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":266,"file":"command.js","path":"src"}},{"name":"isUsable","description":"Checks if the command is usable for a message","params":[{"name":"message","description":"The message","default":null,"nullable":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":278,"file":"command.js","path":"src"}},{"name":"usage","description":"Creates a usage string for the command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":"this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":291,"file":"command.js","path":"src"}},{"name":"reload","description":"Reloads the command","meta":{"line":298,"file":"command.js","path":"src"}},{"name":"unload","description":"Unloads the command","meta":{"line":324,"file":"command.js","path":"src"}},{"name":"usage","description":"Creates a usage string for a command","scope":"static","params":[{"name":"command","description":"A command + arg string","type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":null,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":null,"type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":336,"file":"command.js","path":"src"}}],"meta":{"line":5,"file":"command.js","path":"src"}},{"name":"CommandDispatcher","description":"Handles parsing messages and running commands from them","construct":{"name":"CommandDispatcher","params":[{"name":"client","description":"Client the dispatcher is for","type":[[["CommandoClient"]]]},{"name":"registry","description":"Registry the dispatcher will use","type":[[["CommandRegistry"]]]}]},"props":[{"name":"client","description":"Client this dispatcher handles messages for","type":[[["CommandoClient"]]],"meta":{"line":15,"file":"dispatcher.js","path":"src"}},{"name":"registry","description":"Registry this dispatcher uses","type":[[["CommandRegistry"]]],"meta":{"line":21,"file":"dispatcher.js","path":"src"}},{"name":"inhibitors","description":"Functions that can block commands from running","type":[[["Set",".<"],["function","()>"]]],"meta":{"line":27,"file":"dispatcher.js","path":"src"}}],"methods":[{"name":"addInhibitor","description":"Adds an inhibitor","examples":["client.dispatcher.addInhibitor(msg => {\n  if(blacklistedUsers.has(msg.author.id)) return 'blacklisted';\n});","client.dispatcher.addInhibitor(msg => {\n\tif(!coolUsers.has(msg.author.id)) return ['cool', msg.reply('You\\'re not cool enough!')];\n});"],"params":[{"name":"inhibitor","description":"The inhibitor function to add","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the addition was successful"},"meta":{"line":56,"file":"dispatcher.js","path":"src"}},{"name":"removeInhibitor","description":"Removes an inhibitor","params":[{"name":"inhibitor","description":"The inhibitor function to remove","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the removal was successful"},"meta":{"line":68,"file":"dispatcher.js","path":"src"}},{"name":"handleMessage","description":"Handle a new message or a message update","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":81,"file":"dispatcher.js","path":"src"}},{"name":"shouldHandleMessage","description":"Check whether a message should be handled","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":148,"file":"dispatcher.js","path":"src"}},{"name":"inhibit","description":"Inhibits a command message","access":"private","params":[{"name":"cmdMsg","description":"Command message to inhibit","type":[[["CommandMessage"]]]}],"returns":{"types":[[["Array"]]],"description":"[reason, ?response]","nullable":true},"meta":{"line":168,"file":"dispatcher.js","path":"src"}},{"name":"cacheCommandMessage","description":"Caches a command message to be editable","access":"private","params":[{"name":"message","description":"Triggering message","type":[[["Message"]]]},{"name":"oldMessage","description":"Triggering message's old version","type":[[["Message"]]]},{"name":"cmdMsg","description":"Command message to cache","type":[[["CommandMessage"]]]},{"name":"responses","description":"Responses to the message","type":[[["Message"]],[["Array",".<"],["Message",">"]]]}],"meta":{"line":187,"file":"dispatcher.js","path":"src"}},{"name":"parseMessage","description":"Parses a message to find details about command usage in it","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]}],"returns":{"types":[[["CommandMessage"]]],"nullable":true},"meta":{"line":206,"file":"dispatcher.js","path":"src"}},{"name":"matchDefault","description":"Matches a message against a guild command pattern","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]},{"name":"pattern","description":"The pattern to match against","type":[[["RegExp"]]]},{"name":"commandNameIndex","description":"The index of the command name in the pattern matches","default":1,"type":[[["number"]]]}],"returns":{"types":[[["CommandMessage"]]],"nullable":true},"meta":{"line":232,"file":"dispatcher.js","path":"src"}},{"name":"buildCommandPattern","description":"Creates a regular expression to match the command prefix and name in a message","access":"private","params":[{"name":"guild","description":"The Guild that the message is from","nullable":true,"type":[[["Guild"]]]}],"returns":[[["RegExp"]]],"meta":{"line":247,"file":"dispatcher.js","path":"src"}}],"meta":{"line":5,"file":"dispatcher.js","path":"src"}},{"name":"CommandGroup","description":"A group for commands. Whodathunkit?","construct":{"name":"CommandGroup","params":[{"name":"client","description":"The client the group is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The ID for the group","type":[[["string"]]]},{"name":"name","description":"The name of the group","optional":true,"default":"id","type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"commands","description":"The commands that the group contains","optional":true,"default":null,"type":[[["Array",".<"],["Command",">"]]]}]},"props":[{"name":"client","description":"Client that this group is for","type":[[["CommandoClient"]]],"meta":{"line":22,"file":"group.js","path":"src"}},{"name":"id","description":"ID of this group","type":[[["string"]]],"meta":{"line":28,"file":"group.js","path":"src"}},{"name":"name","description":"Name of this group","type":[[["string"]]],"meta":{"line":34,"file":"group.js","path":"src"}},{"name":"commands","description":"The commands in this group (added upon their registration)","type":[[["Collection",".<"],["string",", "],["Command",">"]]],"meta":{"line":40,"file":"group.js","path":"src"}},{"name":"guarded","description":"Whether or not this group is protected from being disabled","type":[[["boolean"]]],"meta":{"line":49,"file":"group.js","path":"src"}}],"methods":[{"name":"setEnabledIn","description":"Enables or disables the group in a guild","params":[{"name":"guild","description":"Guild to enable/disable the group in","type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":59,"file":"group.js","path":"src"}},{"name":"isEnabledIn","description":"Checks if the group is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether or not the group is enabled"},"meta":{"line":77,"file":"group.js","path":"src"}},{"name":"reload","description":"Reloads all of the group's commands","meta":{"line":87,"file":"group.js","path":"src"}}],"meta":{"line":4,"file":"group.js","path":"src"}},{"name":"CommandMessage","description":"A container for a message that triggers a command, that command, and methods to respond","construct":{"name":"CommandMessage","params":[{"name":"message","description":"Message that triggers the command","type":[[["Message"]]]},{"name":"command","description":"Command the message triggers","optional":true,"default":null,"type":[[["Command"]]]},{"name":"argString","description":"Argument string for the command","optional":true,"default":null,"type":[[["string"]]]},{"name":"patternMatches","description":"Command pattern matches (if from a pattern trigger)","optional":true,"default":null,"nullable":true,"type":[[["Array",".<"],["string",">"]]]}]},"props":[{"name":"client","description":"Client that the message was sent from","type":[[["CommandoClient"]]],"meta":{"line":19,"file":"message.js","path":"src"}},{"name":"message","description":"Message that triggers the command","type":[[["Message"]]],"meta":{"line":25,"file":"message.js","path":"src"}},{"name":"command","description":"Command that the message triggers, if any","nullable":true,"type":[[["Command"]]],"meta":{"line":31,"file":"message.js","path":"src"}},{"name":"argString","description":"Argument string for the command","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"message.js","path":"src"}},{"name":"patternMatches","description":"Pattern matches (if from a pattern trigger)","nullable":true,"type":[[["Array",".<"],["string",">"]]],"meta":{"line":43,"file":"message.js","path":"src"}},{"name":"responses","description":"Response messages sent, mapped by channel ID (set by the dispatcher after running the command)","nullable":true,"type":[[["Object"]]],"meta":{"line":49,"file":"message.js","path":"src"}},{"name":"responsePositions","description":"The index of the current response that will be edited, mapped by channel ID","nullable":true,"type":[[["Object"]]],"meta":{"line":55,"file":"message.js","path":"src"}},{"name":"id","description":"Shortcut to `this.message.id`","type":[[["string"]]],"meta":{"line":460,"file":"message.js","path":"src"}},{"name":"content","description":"Shortcut to `this.message.content`","type":[[["string"]]],"meta":{"line":468,"file":"message.js","path":"src"}},{"name":"author","description":"Shortcut to `this.message.author`","type":[[["User"]]],"meta":{"line":476,"file":"message.js","path":"src"}},{"name":"channel","description":"Shortcut to `this.message.channel`","type":[[["Channel"]]],"meta":{"line":484,"file":"message.js","path":"src"}},{"name":"guild","description":"Shortcut to `this.message.guild`","nullable":true,"type":[[["Guild"]]],"meta":{"line":492,"file":"message.js","path":"src"}},{"name":"member","description":"Shortcut to `this.message.member`","nullable":true,"type":[[["GuildMember"]]],"meta":{"line":500,"file":"message.js","path":"src"}},{"name":"pinned","description":"Shortcut to `this.message.pinned`","type":[[["boolean"]]],"meta":{"line":508,"file":"message.js","path":"src"}},{"name":"tts","description":"Shortcut to `this.message.tts`","type":[[["boolean"]]],"meta":{"line":516,"file":"message.js","path":"src"}},{"name":"nonce","description":"Shortcut to `this.message.nonce`","type":[[["string"]]],"meta":{"line":524,"file":"message.js","path":"src"}},{"name":"system","description":"Shortcut to `this.message.system`","type":[[["boolean"]]],"meta":{"line":532,"file":"message.js","path":"src"}},{"name":"embeds","description":"Shortcut to `this.message.embeds`","type":[[["Array",".<"],["MessageEmbed",">"]]],"meta":{"line":540,"file":"message.js","path":"src"}},{"name":"attachments","description":"Shortcut to `this.message.attachments`","type":[[["Collection",".<"],["string",", "],["MessageAttachment",">"]]],"meta":{"line":548,"file":"message.js","path":"src"}},{"name":"createdTimestamp","description":"Shortcut to `this.message.createdTimestamp`","type":[[["number"]]],"meta":{"line":556,"file":"message.js","path":"src"}},{"name":"createdAt","description":"Shortcut to `this.message.createdAt`","type":[[["Date"]]],"meta":{"line":564,"file":"message.js","path":"src"}},{"name":"editedTimestamp","description":"Shortcut to `this.message.editedTimestamp`","type":[[["number"]]],"meta":{"line":572,"file":"message.js","path":"src"}},{"name":"editedAt","description":"Shortcut to `this.message.editedAt`","type":[[["Date"]]],"meta":{"line":580,"file":"message.js","path":"src"}},{"name":"mentions","description":"Shortcut to `this.message.mentions`","type":[[["MentionsObject"]]],"meta":{"line":588,"file":"message.js","path":"src"}},{"name":"cleanContent","description":"Shortcut to `this.message.cleanContent`","type":[[["string"]]],"meta":{"line":596,"file":"message.js","path":"src"}},{"name":"edits","description":"Shortcut to `this.message.edits`","type":[[["Array",".<"],["Message",">"]]],"meta":{"line":604,"file":"message.js","path":"src"}},{"name":"editable","description":"Shortcut to `this.message.editable`","type":[[["boolean"]]],"meta":{"line":612,"file":"message.js","path":"src"}},{"name":"deletable","description":"Shortcut to `this.message.deletable`","type":[[["boolean"]]],"meta":{"line":620,"file":"message.js","path":"src"}},{"name":"pinnable","description":"Shortcut to `this.message.pinnable`","type":[[["boolean"]]],"meta":{"line":628,"file":"message.js","path":"src"}}],"methods":[{"name":"usage","description":"Creates a usage string for the message's command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.message.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":66,"file":"message.js","path":"src"}},{"name":"anyUsage","description":"Creates a usage string for any command","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.message.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":82,"file":"message.js","path":"src"}},{"name":"parseArgs","description":"Parses the argString into usable arguments, based on the argsType and argsCount of the command","see":["{@link Command#run}"],"returns":[[["string"]],[["Array",".<"],["string",">"]]],"meta":{"line":95,"file":"message.js","path":"src"}},{"name":"obtainArgs","description":"Obtains the values for the command's arguments","returns":[[["Array",".<*>"]]],"meta":{"line":110,"file":"message.js","path":"src"}},{"name":"run","description":"Runs the command","returns":[[["Promise",".<(?"],["Message","|?"],["Array",".<"],["Message",">)>"]]],"meta":{"line":132,"file":"message.js","path":"src"}},{"name":"throttleCommand","description":"Throttles the command if necessary (the owner is excluded)","access":"private","returns":{"types":[[["Object"]]],"nullable":true},"meta":{"line":222,"file":"message.js","path":"src"}},{"name":"respond","description":"Responds to the command message","access":"private","params":[{"name":"options","description":"Options for the response","type":[[["Object"]]]}],"returns":[[["Message"]],[["Array",".<"],["Message",">"]]],"meta":{"line":248,"file":"message.js","path":"src"}},{"name":"editResponse","description":"Edits a response to the command message","access":"private","params":[{"name":"response","description":"The response message(s) to edit","type":[[["Message"]],[["Array",".<"],["Message",">"]]]},{"name":"options","description":"Options for the response","type":[[["Object"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":294,"file":"message.js","path":"src"}},{"name":"editCurrentResponse","description":"Edits the current response","access":"private","params":[{"name":"id","description":"The ID of the channel the response is in (\"DM\" for direct messages)","type":[[["string"]]]},{"name":"options","description":"Options for the response","type":[[["Object"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":332,"file":"message.js","path":"src"}},{"name":"say","description":"Responds with a plain message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":345,"file":"message.js","path":"src"}},{"name":"reply","description":"Responds with a reply message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":355,"file":"message.js","path":"src"}},{"name":"direct","description":"Responds with a direct message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":365,"file":"message.js","path":"src"}},{"name":"code","description":"Responds with a code message","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":376,"file":"message.js","path":"src"}},{"name":"finalize","description":"Finalizes the command message by setting the responses and deleting any remaining prior ones","access":"private","params":[{"name":"responses","description":"Responses to the message","nullable":true,"type":[[["Array",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]]}],"meta":{"line":385,"file":"message.js","path":"src"}},{"name":"deleteRemainingResponses","description":"Deletes any prior responses that haven't been updated","access":"private","meta":{"line":411,"file":"message.js","path":"src"}},{"name":"isMentioned","description":"Shortcut to `this.message.isMentioned(data)`","params":[{"name":"data","description":"A guild channel, user, or a role, or the ID of any of these","type":[[["GuildChannel"]],[["User"]],[["Role"]],[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":637,"file":"message.js","path":"src"}},{"name":"edit","description":"Shortcut to `this.message.edit(content)`","params":[{"name":"content","description":"New content for the message","type":[[["StringResolvable"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":646,"file":"message.js","path":"src"}},{"name":"editCode","description":"Shortcut to `this.message.editCode(content)`","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"New content for the message","type":[[["StringResolvable"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":656,"file":"message.js","path":"src"}},{"name":"pin","description":"Shortcut to `this.message.pin()`","returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":664,"file":"message.js","path":"src"}},{"name":"unpin","description":"Shortcut to `this.message.unpin()`","returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":672,"file":"message.js","path":"src"}},{"name":"delete","description":"Shortcut to `this.message.delete()`","params":[{"name":"timeout","description":"How long to wait to delete the message in milliseconds","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":681,"file":"message.js","path":"src"}},{"name":"parseArgs","description":"Parses an argument string into an array of arguments","scope":"static","params":[{"name":"argString","description":"The argument string to parse","type":[[["string"]]]},{"name":"argCount","description":"The number of arguments to extract from the string","optional":true,"type":[[["number"]]]},{"name":"allowSingleQuote","description":"Whether or not single quotes should be allowed to wrap arguments,\nin addition to double quotes","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["Array",".<"],["string",">"]]],"description":"The array of arguments"},"meta":{"line":433,"file":"message.js","path":"src"}}],"meta":{"line":7,"file":"message.js","path":"src"}},{"name":"CommandRegistry","description":"Handles registration and searching of commands and groups","construct":{"name":"CommandRegistry","params":[{"name":"client","description":"Client to use","optional":true,"type":[[["CommandoClient"]]]}]},"props":[{"name":"client","description":"The client this registry is for","type":[[["CommandoClient"]]],"meta":{"line":15,"file":"registry.js","path":"src"}},{"name":"commands","description":"Registered commands","type":[[["Collection",".<"],["string",", "],["Command",">"]]],"meta":{"line":21,"file":"registry.js","path":"src"}},{"name":"groups","description":"Registered command groups","type":[[["Collection",".<"],["string",", "],["Command",">"]]],"meta":{"line":27,"file":"registry.js","path":"src"}},{"name":"evalObjects","description":"Registered objects for the eval command","type":[[["Object"]]],"meta":{"line":33,"file":"registry.js","path":"src"}},{"name":"commandsPath","description":"Fully resolved path to the bot's commands directory","nullable":true,"type":[[["string"]]],"meta":{"line":39,"file":"registry.js","path":"src"}}],"methods":[{"name":"registerGroup","description":"Registers a single group","see":["{@link CommandRegistry#registerGroups}"],"params":[{"name":"group","description":"A CommandGroup instance, a constructor,\nan array of [ID, Name], or the group ID","type":[[["CommandGroup"]],[["function"]],[["Array",".<"],["string",">"]],[["string"]]]},{"name":"name","description":"name - Name for the group (if the first argument is the group ID)","optional":true,"type":[[["string"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":50,"file":"registry.js","path":"src"}},{"name":"registerGroups","description":"Registers multiple groups","params":[{"name":"groups","description":"An array of CommandGroup instances, constructors,\nor arrays of [ID, Name]","type":[[["Array",".<"],["CommandGroup",">"]],[["Array",".<"],["function","()>"]],[["Array",".<"],["Array",".<"],["string",">>"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":61,"file":"registry.js","path":"src"}},{"name":"registerCommand","description":"Registers a single command","see":["{@link CommandRegistry#registerCommands}"],"params":[{"name":"command","description":"Either a Command instance, or a constructor for one","type":[[["Command"]],[["CommandBuilder"]],[["function"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":93,"file":"registry.js","path":"src"}},{"name":"registerCommands","description":"Registers multiple commands","params":[{"name":"commands","description":"An array of Command instances or constructors","type":[[["Array",".<"],["Command",">"]],[["Array",".<"],["CommandBuilder",">"]],[["Array",".<"],["function","()>"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":102,"file":"registry.js","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a given directory. The files must export a Command class constructor or instance,\nor a CommandBuilder instance.","params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":152,"file":"registry.js","path":"src"}},{"name":"registerDefaults","description":"Registers both the default groups and commands","returns":[[["CommandRegistry"]]],"meta":{"line":166,"file":"registry.js","path":"src"}},{"name":"registerDefaultGroups","description":"Registers the default groups","returns":[[["CommandRegistry"]]],"meta":{"line":176,"file":"registry.js","path":"src"}},{"name":"registerDefaultCommands","description":"Registers the default commands to the registry","params":[{"name":"options","description":"Object specifying what commands to register","optional":true,"type":[[["Object"]]]},{"name":"options.help","description":"Whether or not to register the built-in help command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.prefix","description":"Whether or not to register the built-in prefix command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.eval_","description":"Whether or not to register the built-in eval command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.ping","description":"Whether or not to register the built-in ping command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.commandState","description":"Whether or not to register the built-in command state commands\n(enable, disable, reload, list groups)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":194,"file":"registry.js","path":"src"}},{"name":"reregisterCommand","description":"Reregisters a command (does not support changing name, group, or memberName)","params":[{"name":"command","description":"New command","type":[[["Command"]],[["CommandBuilder"]],[["function"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":217,"file":"registry.js","path":"src"}},{"name":"unregisterCommand","description":"Unregisters a command","params":[{"name":"command","description":"Command to unregister","type":[[["Command"]]]}],"meta":{"line":240,"file":"registry.js","path":"src"}},{"name":"registerEvalObject","description":"Registers a single object to be usable by the eval command","see":["{@link CommandRegistry#registerEvalObjects}"],"params":[{"name":"key","description":"The key for the object","type":[[["string"]]]},{"name":"obj","description":"The object","type":[[["Object"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":259,"file":"registry.js","path":"src"}},{"name":"registerEvalObjects","description":"Registers multiple objects to be usable by the eval command","params":[{"name":"obj","description":"An object of keys: values","type":[[["Object"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":270,"file":"registry.js","path":"src"}},{"name":"buildCommand","description":"Create a command builder","params":[{"name":"info","description":"The command information","optional":true,"default":null,"type":[[["CommandInfo"]]]},{"name":"funcs","description":"The command functions to set","optional":true,"default":null,"type":[[["CommandBuilderFunctions"]]]}],"returns":{"types":[[["CommandBuilder"]]],"description":"The builder"},"meta":{"line":281,"file":"registry.js","path":"src"}},{"name":"findGroups","description":"Finds all groups that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Array",".<"],["CommandGroup",">"]]],"description":"All groups that are found"},"meta":{"line":291,"file":"registry.js","path":"src"}},{"name":"resolveGroup","description":"Resolves a CommandGroupResolvable to a CommandGroup object","params":[{"name":"group","description":"The group to resolve","type":[[["CommandGroupResolvable"]]]}],"returns":{"types":[[["CommandGroup"]]],"description":"The resolved CommandGroup"},"meta":{"line":320,"file":"registry.js","path":"src"}},{"name":"findCommands","description":"Finds all commands that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"message","description":"The message to check usability against","optional":true,"default":null,"type":[[["Message"]]]}],"returns":{"types":[[["Array",".<"],["Command",">"]]],"description":"All commands that are found"},"meta":{"line":336,"file":"registry.js","path":"src"}},{"name":"resolveCommand","description":"Resolves a CommandResolvable to a Command object","params":[{"name":"command","description":"The command to resolve","type":[[["CommandResolvable"]]]}],"returns":{"types":[[["Command"]]],"description":"The resolved Command"},"meta":{"line":369,"file":"registry.js","path":"src"}}],"meta":{"line":8,"file":"registry.js","path":"src"}},{"name":"CommandFormatError","description":"Has a descriptive message for a command not having proper format","extends":["Error"],"construct":{"name":"CommandFormatError","params":[{"name":"msg","description":"The command message the error is for","type":[[["CommandMessage"]]]}]},"meta":{"line":7,"file":"command-format.js","path":"src/errors"}},{"name":"FriendlyError","description":"Has a message that can be considered user-friendly","extends":["Error"],"construct":{"name":"FriendlyError","params":[{"name":"message","description":"The error message","type":[[["string"]]]}]},"meta":{"line":5,"file":"friendly.js","path":"src/errors"}},{"name":"GuildExtension","description":"Contains additional methods and properties that are added to the discord.js Guild class","props":[{"name":"commandPrefix","description":"The command prefix in the guild - modifying this will emit {@link CommandoClient#commandPrefixChange}.","type":[[["string"]]],"meta":{"line":9,"file":"guild.js","path":"src/extensions"}}],"methods":[{"name":"setCommandEnabled","description":"Sets whether a command is enabled in the guild","params":[{"name":"command","description":"Command to set status of","type":[[["CommandResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled","type":[[["boolean"]]]}],"meta":{"line":29,"file":"guild.js","path":"src/extensions"}},{"name":"isCommandEnabled","description":"Checks whether a command is enabled in the guild (does not take the command's group status into account)","params":[{"name":"command","description":"Command to check status of","type":[[["CommandResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":51,"file":"guild.js","path":"src/extensions"}},{"name":"setGroupEnabled","description":"Sets whether a command group is enabled in the guild","params":[{"name":"group","description":"Command to set status of","type":[[["CommandGroupResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled","type":[[["boolean"]]]}],"meta":{"line":65,"file":"guild.js","path":"src/extensions"}},{"name":"isGroupEnabled","description":"Checks whether a command group is enabled in the guild","params":[{"name":"group","description":"Group to check status of","type":[[["CommandGroupResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":87,"file":"guild.js","path":"src/extensions"}},{"name":"commandUsage","description":"Creates a command usage string using the guild's prefix","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":100,"file":"guild.js","path":"src/extensions"}},{"name":"applyToClass","description":"Applies the interface to a class prototype","scope":"static","access":"private","params":[{"name":"target","description":"The constructor function to apply to the prototype of","type":[[["function"]]]}],"meta":{"line":109,"file":"guild.js","path":"src/extensions"}}],"meta":{"line":4,"file":"guild.js","path":"src/extensions"}},{"name":"SettingProvider","description":"Loads and stores settings associated with guilds","abstract":true,"methods":[{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","abstract":true,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","abstract":true,"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","abstract":true,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise",".<*>"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<*>"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","abstract":true,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}},{"name":"getGuildID","description":"Obtains the ID of the provided guild, or throws an error if it isn't valid","scope":"static","params":[{"name":"guild","description":"Guild to get the ID of","type":[[["Guild"]],[["string"]]]}],"returns":{"types":[[["string"]]],"description":"ID of the guild, or 'global'"},"meta":{"line":71,"file":"base.js","path":"src/providers"}}],"meta":{"line":8,"file":"base.js","path":"src/providers"}},{"name":"SQLiteProvider","description":"Uses an SQLite database to store settings with guilds","extends":["SettingProvider"],"construct":{"name":"SQLiteProvider","params":[{"name":"db","description":"Database for the provider","type":[[["SQLiteDatabase"]]]}]},"props":[{"name":"db","description":"Database that will be used for storing/retrieving settings","type":[[["SQLiteDatabase"]]],"meta":{"line":23,"file":"sqlite.js","path":"src/providers"}},{"name":"client","description":"Client that the provider is for (set once the client is ready, after using {@link CommandoClient#setProvider})","nullable":true,"type":[[["CommandoClient"]]],"meta":{"line":29,"file":"sqlite.js","path":"src/providers"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global')","access":"private","type":[[["Map"]]],"meta":{"line":36,"file":"sqlite.js","path":"src/providers"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name","access":"private","type":[[["Map"]]],"meta":{"line":43,"file":"sqlite.js","path":"src/providers"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":50,"file":"sqlite.js","path":"src/providers"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":57,"file":"sqlite.js","path":"src/providers"}}],"methods":[{"name":"setupGuild","description":"Loads all settings for a guild","access":"private","params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"meta":{"line":165,"file":"sqlite.js","path":"src/providers"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["Guild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":187,"file":"sqlite.js","path":"src/providers"}},{"name":"setupGuildGroup","description":"Sets up a group's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["Guild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":204,"file":"sqlite.js","path":"src/providers"}},{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","inherits":"SettingProvider#init","inherited":true,"abstract":true,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","inherits":"SettingProvider#destroy","inherited":true,"abstract":true,"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","inherits":"SettingProvider#get","inherited":true,"abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","inherits":"SettingProvider#set","inherited":true,"abstract":true,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise",".<*>"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","inherits":"SettingProvider#remove","inherited":true,"abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<*>"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","inherits":"SettingProvider#clear","inherited":true,"abstract":true,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}}],"meta":{"line":7,"file":"sqlite.js","path":"src/providers"}}],"interfaces":[],"typedefs":[{"name":"CommandArgumentInfo","type":[[["Object"]]],"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]]},{"name":"label","description":"Label for the argument","optional":true,"default":"key","type":[[["string"]]]},{"name":"prompt","description":"First prompt for the argument when it wasn't specified","type":[[["string"]]]},{"name":"type","description":"Type of the argument\n('string', 'integer', 'float', 'user', 'member', 'role', or 'channel')","optional":true,"type":[[["string"]]]},{"name":"max","description":"If type is 'integer' or 'float', this is the maximum value of the number.\nIf type is 'string', this is the maximum length of the string.","optional":true,"type":[[["number"]]]},{"name":"min","description":"If type is 'integer' or 'float', this is the minimum value of the number.\nIf type is 'string', this is the minimum length of the string.","optional":true,"type":[[["number"]]]},{"name":"default","description":"Default value for the argument (makes the argument optional - cannot be `null`)","optional":true,"type":[["*"]]},{"name":"infinite","description":"Whether the argument accepts infinite values","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"validate","description":"Validator function for the argument","optional":true,"type":[[["ArgumentValidator"]]]},{"name":"parse","description":"Parser function for the argument","optional":true,"type":[[["ArgumentParser"]]]},{"name":"wait","description":"How long to wait for input (in seconds)","optional":true,"default":30,"type":[[["number"]]]}],"meta":{"line":9,"file":"argument.js","path":"src"}},{"name":"ArgumentValidator","description":"Function that validates an input value string","type":[[["function"]]],"meta":{"line":27,"file":"argument.js","path":"src"}},{"name":"ArgumentParser","description":"Function that parses an input value string into a proper value for the argument","type":[[["function"]]],"meta":{"line":37,"file":"argument.js","path":"src"}},{"name":"CommandBuilderFunctions","type":[[["Object"]]],"props":[{"name":"run","description":"The run function to set","optional":true,"type":[[["function"]]]},{"name":"hasPermission","description":"The hasPermission function to set","optional":true,"type":[[["function"]]]}],"meta":{"line":5,"file":"builder.js","path":"src"}},{"name":"CommandoClientOptions","description":"Options for a CommandoClient","type":[[["ClientOptions"]]],"props":[{"name":"selfbot","description":"Whether the command dispatcher should be in selfbot mode","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"commandPrefix","description":"Default command prefix","optional":true,"default":"!","type":[[["string"]]]},{"name":"commandEditableDuration","description":"Time in seconds that command messages should be editable","optional":true,"default":30,"type":[[["number"]]]},{"name":"nonCommandEditable","description":"Whether messages without commands can be edited to a command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"unknownCommandResponse","description":"Whether the bot should respond to an unknown command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"owner","description":"ID of the bot owner's Discord user","optional":true,"type":[[["string"]]]},{"name":"invite","description":"Invite URL to the bot's support server","optional":true,"type":[[["string"]]]}],"meta":{"line":10,"file":"client.js","path":"src"}},{"name":"ThrottlingOptions","type":[[["Object"]]],"props":[{"name":"usages","description":"Maximum number of usages of the command allowed in the time frame.","type":[[["number"]]]},{"name":"duration","description":"Amount of time to count the usages of the command within (in seconds).","type":[[["number"]]]}],"meta":{"line":6,"file":"command.js","path":"src"}},{"name":"CommandInfo","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the command (must be lowercase)","type":[[["string"]]]},{"name":"aliases","description":"Alternative names for the command (all must be lowercase)","optional":true,"type":[[["Array",".<"],["string",">"]]]},{"name":"autoAliases","description":"Whether automatic aliases should be added","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"group","description":"The ID of the group the command belongs to (must be lowercase)","type":[[["string"]]]},{"name":"memberName","description":"The member name of the command in the group (must be lowercase)","type":[[["string"]]]},{"name":"description","description":"A short description of the command","type":[[["string"]]]},{"name":"format","description":"The command usage format string","optional":true,"default":"name","type":[[["string"]]]},{"name":"details","description":"A detailed description of the command and its functionality","optional":true,"type":[[["string"]]]},{"name":"examples","description":"Usage examples of the command","optional":true,"type":[[["Array",".<"],["string",">"]]]},{"name":"guildOnly","description":"Whether or not the command should only function in a guild channel","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"defaultHandling","description":"Whether or not the default command handling should be used.\nIf false, then only patterns will trigger the command.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"throttling","description":"Options for throttling usages of the command.","optional":true,"type":[[["ThrottlingOptions"]]]},{"name":"args","description":"Arguments for the command.","optional":true,"type":[[["Array",".<"],["CommandArgumentInfo",">"]]]},{"name":"argsType","description":"One of 'single' or 'multiple'. Only applicable if `args` is not specified.\nWhen 'single', the entire argument string will be passed to run as one argument.\nWhen 'multiple', it will be passed as multiple arguments.","optional":true,"default":"single","type":[[["string"]]]},{"name":"argsCount","description":"The number of arguments to parse from the command string.\nOnly applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\nWhen this is 0, the command argument string will be split into as many arguments as it can be.\nWhen nonzero, it will be split into a maximum of this number of arguments.","optional":true,"default":0,"type":[[["number"]]]},{"name":"argsSingleQuotes","description":"Whether or not single quotes should be allowed to box-in arguments\nin the command string.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"patterns","description":"Patterns to use for triggering the command","optional":true,"type":[[["Array",".<"],["RegExp",">"]]]},{"name":"guarded","description":"Whether the command should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":12,"file":"command.js","path":"src"}},{"name":"Inhibitor","description":"A function that can block the usage of a command - these functions are passed the command message that is\ntriggering the command. They should return `false` if the command should *not* be blocked. If the command *should*\nbe blocked, they should return one of the following:\n- A single string identifying the reason the command is blocked\n- An array of the above string as element 0, and a response promise or `null` as element 1","type":[[["function"]]],"meta":{"line":34,"file":"dispatcher.js","path":"src"}},{"name":"CommandGroupResolvable","description":"A CommandGroupResolvable can be:\n* A CommandGroup\n* A group ID","type":[[["CommandGroup"]],[["string"]]],"meta":{"line":308,"file":"registry.js","path":"src"}},{"name":"CommandResolvable","description":"A CommandResolvable can be:\n* A Command\n* A command name\n* A CommandMessage","type":[[["Command"]],[["string"]]],"meta":{"line":356,"file":"registry.js","path":"src"}}],"externals":[{"name":"Channel","see":["{@link https://discord.js.org/#/docs/main/master/class/Channel}"],"meta":{"line":24,"file":"index.js","path":"src"}},{"name":"Client","see":["{@link https://discord.js.org/#/docs/main/master/class/Client}"],"meta":{"line":28,"file":"index.js","path":"src"}},{"name":"ClientOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/ClientOptions}"],"meta":{"line":32,"file":"index.js","path":"src"}},{"name":"Collection","see":["{@link https://discord.js.org/#/docs/main/master/class/Collection}"],"meta":{"line":36,"file":"index.js","path":"src"}},{"name":"Guild","see":["{@link https://discord.js.org/#/docs/main/master/class/Guild}"],"meta":{"line":40,"file":"index.js","path":"src"}},{"name":"GuildMember","see":["{@link https://discord.js.org/#/docs/main/master/class/GuildMember}"],"meta":{"line":44,"file":"index.js","path":"src"}},{"name":"GuildResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/GuildResolvable}"],"meta":{"line":48,"file":"index.js","path":"src"}},{"name":"MentionsObject","see":["{@link https://discord.js.org/#/docs/main/master/class/Message?scrollTo=mentions}"],"meta":{"line":52,"file":"index.js","path":"src"}},{"name":"Message","see":["{@link https://discord.js.org/#/docs/main/master/class/Message}"],"meta":{"line":56,"file":"index.js","path":"src"}},{"name":"MessageAttachment","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageAttachment}"],"meta":{"line":60,"file":"index.js","path":"src"}},{"name":"MessageEmbed","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageEmbed}"],"meta":{"line":64,"file":"index.js","path":"src"}},{"name":"MessageOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/MessageOptions}"],"meta":{"line":68,"file":"index.js","path":"src"}},{"name":"Role","see":["{@link https://discord.js.org/#/docs/main/master/class/Role}"],"meta":{"line":72,"file":"index.js","path":"src"}},{"name":"StringResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/StringResolvable}"],"meta":{"line":76,"file":"index.js","path":"src"}},{"name":"User","see":["{@link https://discord.js.org/#/docs/main/master/class/User}"],"meta":{"line":80,"file":"index.js","path":"src"}},{"name":"SQLiteDatabase","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":8,"file":"sqlite.js","path":"src/providers"}},{"name":"SQLiteStatement","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":59,"file":"sqlite.js","path":"src/providers"}}]}